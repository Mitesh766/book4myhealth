generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id              String @id @default(uuid())
  name            String
  address         String
  patientIdPrefix String
  lastSeq         Int    @default(0)

  patients           Patient[]
  doctors            Doctor[]
  appointments       Appointment[]
  appointmentHistory AppointmentHistory[]
}

enum UsrRole {
  SuperAdmin
  Admin
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String?
  phoneNo  String?
  refreshToken String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GenderType {
  MALE
  FEMALE
  OTHER
}

model Doctor {
  id                   String     @id @default(uuid())
  clinicId             String
  name                 String
  email                String
  phoneNo              String
  gender               GenderType
  specialisation       String
  isActive             Boolean    @default(true)
  defaultAvailability  Json
  overrideAvailability Json
  avgTimePerPatient    Int
  createdAt            DateTime   @default(now())

  clinic             Clinic               @relation(fields: [clinicId], references: [id])
  appointments       Appointment[]
  AppointmentHistory AppointmentHistory[]
}

model Patient {
  id        String     @id @default(uuid())
  clinicId  String
  seq       Int
  customId  String
  name      String
  gender    GenderType
  phoneNo   String
  createdAt DateTime   @default(now())

  clinic             Clinic               @relation(fields: [clinicId], references: [id])
  appointments       Appointment[]
  AppointmentHistory AppointmentHistory[]

  @@unique([clinicId, seq])
  @@unique([clinicId, customId])
}

enum VisitType {
  Appointment
  Emergency
  WalkIn
}

enum AppointmentStatus {
  SCHEDULED
  CHECKED_IN
  WITH_DOCTOR
  COMPLETED
  CANCELLED
}

model Appointment {
  id             String            @id @default(uuid())
  clinicId       String
  patientId      String
  doctorId       String
  visitType      VisitType
  priority       Int
  start          DateTime?
  end            DateTime?
  status         AppointmentStatus @default(SCHEDULED)
  checkInTime    DateTime?
  withDoctorTime DateTime?

  clinic  Clinic  @relation(fields: [clinicId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
  patient Patient @relation(fields: [patientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId])
  @@index([doctorId])
  @@index([clinicId])
}

enum HistoryStatus {
  Completed
  Cancelled
}

model AppointmentHistory {
  id             String        @id
  patientId      String
  doctorId       String
  clinicId       String
  visitType      VisitType
  date           DateTime
  startTime      DateTime?
  endTime        DateTime?
  status         HistoryStatus
  checkInTime    DateTime?
  withDoctorTime DateTime?
  completedAt    DateTime?

  patient Patient @relation(fields: [patientId], references: [id])
  doctor  Doctor  @relation(fields: [doctorId], references: [id])
  clinic  Clinic  @relation(fields: [clinicId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

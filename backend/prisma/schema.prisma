generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id              String @id @default(uuid())
  name            String
  address         String
  patientIdPrefix String @unique
  lastSeq         Int    @default(0)
  phoneNo         String
  email           String

  createdAt DateTime @default(now())

  users        User[]
  patients     Patient[]
  appointments Appointment[]
}

enum UserRole {
  superAdmin
  admin
  doctor
  staff
}

model User {
  id           String   @id @default(uuid())
  name         String
  phoneNo      String
  email        String
  password     String
  role         UserRole
  refreshToken String?
  clinicId     String?
  clinic       Clinic?  @relation(fields: [clinicId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doctor    Doctor?

  @@unique([email, clinicId])
  @@index([clinicId])
}

enum GenderType {
  Male
  Female
  Other
}

model Doctor {
  id                String        @id @default(uuid())
  userId            String        @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender            GenderType
  isActive          Boolean       @default(true)
  specialisation    String
  availability      Json
  avgTimePerPatient Int?
  createdAt         DateTime      @default(now())
  appointments      Appointment[]

  @@index([userId])
}

model Patient {
  id        String     @id @default(uuid())
  clinicId  String
  customId  String
  name      String
  gender    GenderType
  phoneNo   String
  address   String
  createdAt DateTime   @default(now())

  clinic       Clinic        @relation(fields: [clinicId], references: [id], onDelete: Restrict)
  appointments Appointment[]
  reports      Report[]

  @@unique([clinicId, customId])
  @@index([clinicId])
}

enum VisitType {
  Appointment
  Emergency
  WalkIn
}

enum AppointmentStatus {
  SCHEDULED
  CHECKED_IN
  WITH_DOCTOR
  COMPLETED
  CANCELLED
}

model Appointment {
  id             String            @id @default(uuid())
  clinicId       String
  patientId      String
  doctorId       String
  visitType      VisitType
  start          DateTime?
  end            DateTime?
  status         AppointmentStatus @default(SCHEDULED)
  checkInTime    DateTime?
  withDoctorTime DateTime?
  completeTime   DateTime?
  cancelTime     DateTime?
  
  clinic  Clinic  @relation(fields: [clinicId], references: [id], onDelete: Restrict)
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Restrict)
  doctor  Doctor  @relation(fields: [doctorId], references: [userId], onDelete: Restrict)

  createdAt    DateTime       @default(now())
  prescription Prescription[]

  @@index([clinicId, patientId, doctorId])
}

model Prescription {
  id            String      @id @default(uuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Restrict)
  vitals        Json?
  symptoms      String?
  diagnosis     String?
  medications   Json?
  tests         Json?
  advice        String?
  followUpDate  DateTime?
  createdAt     DateTime    @default(now())

  @@index([appointmentId])
}

model Report {
  id        String   @id @default(uuid())
  name      String
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id], onDelete: Restrict)
  link      String
  createdAt DateTime @default(now())

  @@index([patientId])
}
